/*
Deployment script for WIICMATH_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WIICMATH_DB"
:setvar DefaultFilePrefix "WIICMATH_DB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[DeviceLog]...';


GO
CREATE TABLE [dbo].[DeviceLog] (
    [Id]          INT      IDENTITY (1, 1) NOT NULL,
    [DeviceId]    INT      NOT NULL,
    [Timestamp]   DATETIME NULL,
    [Temperature] INT      NOT NULL,
    [Humidity]    INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Device]...';


GO
CREATE TABLE [dbo].[Device] (
    [Id]               INT           IDENTITY (1, 1) NOT NULL,
    [ArdMAC]           NVARCHAR (50) NOT NULL,
    [name]             NVARCHAR (10) NULL,
    [minThresholdTemp] INT           NOT NULL,
    [maxThresholdTemp] INT           NOT NULL,
    [minThresholdHum]  INT           NOT NULL,
    [maxThresholdHum]  INT           NOT NULL,
    [sound]            TINYINT       NOT NULL,
    [light]            TINYINT       NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([ArdMAC] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DeviceLog]...';


GO
ALTER TABLE [dbo].[DeviceLog]
    ADD DEFAULT CURRENT_TIMESTAMP FOR [Timestamp];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 0 FOR [minThresholdTemp];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 10 FOR [maxThresholdTemp];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 0 FOR [minThresholdHum];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 10 FOR [maxThresholdHum];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 1 FOR [sound];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device]
    ADD DEFAULT 1 FOR [light];


GO
PRINT N'Creating Foreign Key [dbo].[FK_DeviceLog_Device_DeviceId]...';


GO
ALTER TABLE [dbo].[DeviceLog]
    ADD CONSTRAINT [FK_DeviceLog_Device_DeviceId] FOREIGN KEY ([DeviceId]) REFERENCES [dbo].[Device] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Procedure [dbo].[spDevice_GetId]...';


GO
CREATE PROCEDURE [dbo].[spDevice_GetId]
	@ArdMAC NVARCHAR(50)
AS
begin
	SELECT Id 
	from dbo.Device
	where ArdMAC = @ArdMAC;
end
GO
PRINT N'Creating Procedure [dbo].[spDeviceLog_Delete]...';


GO
CREATE PROCEDURE [dbo].[spDeviceLog_Delete]
	@Id INT
AS
begin
	DELETE FROM [dbo].[DeviceLog]
	WHERE [Id] = @Id
end
GO
PRINT N'Creating Procedure [dbo].[spDeviceLog_GetDevice]...';


GO
CREATE PROCEDURE [dbo].[spDeviceLog_GetDevice]
	@DeviceId INT
AS
begin
	SELECT * FROM [dbo].[DeviceLog]
	WHERE [DeviceId] = @DeviceId
end
GO
PRINT N'Creating Procedure [dbo].[spDeviceLog_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spDeviceLog_GetAll]

AS
begin
	SELECT * FROM [dbo].[DeviceLog]
end
GO
PRINT N'Creating Procedure [dbo].[spDeviceLog_Insert]...';


GO
CREATE PROCEDURE [dbo].[spDeviceLog_Insert]
	@DeviceId INT,
	@Temperature INT,
	@Humidity INT
AS
begin
	INSERT INTO [dbo].[DeviceLog] ([DeviceId], [Temperature], [Humidity])
	VALUES (@DeviceId, @Temperature, @Humidity)
end
GO
PRINT N'Creating Procedure [dbo].[spDevice_Update]...';


GO
CREATE PROCEDURE [dbo].[spDevice_Update]
	@Id int,
	@ArdMAC nvarchar(50),
	@name nvarchar(50),
	@minThresholdTemp int,
	@maxThresholdTemp int,
	@minThresholdHum int,
	@maxThresholdHum int,
	@sound tinyint,
	@light tinyint
AS
begin
	update dbo.Device
	set ArdMAC = @ArdMAC, [name]= @name , minThresholdTemp = @minThresholdTemp, maxThresholdTemp = @maxThresholdTemp, minThresholdHum = @minThresholdHum, maxThresholdHum = @maxThresholdHum, sound = @sound, light = @light
	where Id = @Id;
end
GO
PRINT N'Creating Procedure [dbo].[spDevice_Insert]...';


GO
CREATE PROCEDURE [dbo].[spDevice_Insert]
	@ArdMAC NVARCHAR(50),
	@name NVARCHAR(50),
	@minThresholdTemp INT,
	@maxThresholdTemp INT,
	@minThresholdHum INT,
	@maxThresholdHum INT,
	@sound TINYINT,
	@light TINYINT
AS
begin
	insert into dbo.Device (ArdMAC,[name], minThresholdTemp, maxThresholdTemp, minThresholdHum, maxThresholdHum, sound, light)
	values (@ArdMAC, @name , @minThresholdTemp, @maxThresholdTemp, @minThresholdHum, @maxThresholdHum, @sound, @light);
end
GO
PRINT N'Creating Procedure [dbo].[spDevice_Delete]...';


GO
CREATE PROCEDURE [dbo].[spDevice_Delete]
	@Id INT,
	@ArdMAC NVARCHAR(50)
AS
begin
	delete
	from dbo.Device
	where Id = @Id or ArdMAC = @ArdMAC;
end
GO
PRINT N'Creating Procedure [dbo].[spDevice_Get]...';


GO
CREATE PROCEDURE [dbo].[spDevice_Get]
	@Id INT,
	@ArdMAC NVARCHAR(50)
AS
begin
	select Id , ArdMAC ,[name] , minThresholdTemp , maxThresholdTemp , minThresholdHum , maxThresholdHum , sound , light
	from dbo.Device
	where Id = @Id or ArdMAC = @ArdMAC;
end
GO
PRINT N'Creating Procedure [dbo].[spDevice_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spDevice_GetAll]
AS
begin
	select * 
	from dbo.Device;
end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '16705e18-ecf1-4367-8940-78787afdb38f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('16705e18-ecf1-4367-8940-78787afdb38f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7029ae76-a21e-4b04-97ee-79c022c9aa44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7029ae76-a21e-4b04-97ee-79c022c9aa44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1dd2da73-0770-4e83-b5a0-73c18ee2e7f2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1dd2da73-0770-4e83-b5a0-73c18ee2e7f2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9d09b69b-6040-4faf-a872-11c06a00df73')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9d09b69b-6040-4faf-a872-11c06a00df73')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
